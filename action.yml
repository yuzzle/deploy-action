name: "Deploy Action"
description: "Deploys code to aws"
inputs:
  ecr-repository:
    description: "Aws ECR repository name"
    required: true
  task-definition:
    description: "Task definition name"
    required: true
  container-name:
    description: "Name of the container in task definition"
    required: true
  service:
    description: "Service name"
    required: true
  cluster:
    description: "Cluster name"
    required: true
  image-tag:
    description: "Image tag"
    required: true
  github-scope:
    description: "Github scope name for creating .npmrc"
    required: true
  github-token:
    description: "Github package token"
    required: true
  aws-access-key-id:
    description: "Aws access key id"
    required: true
  aws-secret-access-key:
    description: "Aws secret access key"
    required: true
  aws-region:
    description: "Aws region"
    required: true
  build-app:
    description: "Should build app by running yarn build"
    default: false
  requires-platform-build:
    description: "Should use docker buildx for multiple platform build"
    default: false

runs:
  using: "composite"
  steps:
    - name: Create .npmrc
      run: |
          echo "//npm.pkg.github.com/:_authToken=${{ inputs.github-token }}" >> ~/.npmrc
          echo "${{ inputs.github-scope }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
      shell: bash
    # Runs a packages install
    - name: Running package install
      run: yarn
      shell: bash

    # Builds the app if requested
    - name: Build the app if requested
      run: |
        if [[ "${{ inputs.build-app }}" ]]; then
          yarn build
        fi
        exit 0
      shell: bash

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # Login to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build docker image and push it to ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        if [[ "${{ inputs.requires-platform-build }}" ]]; then
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PKG_AUTH_TOKEN=$GITHUB_TOKEN .
        else
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PKG_AUTH_TOKEN=$GITHUB_TOKEN .
        fi

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      shell: bash

    # Download task-dfinition json file
    - name: Download task-definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition > task-definition.json
      shell: bash

    # Replace image on task definition
    - name: Create task definition revision
      id: render-image
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.container-name }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}

    # Deploy task definition
    - name: Deploy task definition to service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2.2.0
      with:
        task-definition: ${{ steps.render-image.outputs.task-definition }}
        service: ${{ inputs.service }}
        cluster: ${{ inputs.cluster }}
